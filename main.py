import json
import requests
from apscheduler.schedulers.background import BackgroundScheduler
from telebot.types import ReplyKeyboardMarkup, KeyboardButton
import time

from apiary import create_apiary, check_beehive_exists, view_apiary
from jwt_token import *
from telebot import types
from login import process_login
from registration import process_registration
from bot_config import bot

SERVER_URL = "https://smart-beehive-server.onrender.com/getdata"
SERVER_CREATE_APIARY = "https://smart-beehive-server.onrender.com/api/"

last_data = None
creating_apiary = False  # –±–ª–æ–∫—É–≤–∞–Ω–Ω—è –∫–Ω–æ–ø–æ–∫ –ø—ñ–¥ —á–∞—Å —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–∞—Å—ñ–∫–∏


@bot.message_handler(commands=['start'])
def send_welcome(message):
    chat_id = message.chat.id
    markup = types.InlineKeyboardMarkup()

    if get_token(chat_id) is None:
        markup.add(types.InlineKeyboardButton('–í—Ö—ñ–¥', callback_data='login'))
        markup.add(types.InlineKeyboardButton(
            '–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è', callback_data='registration'))

    else:
        if check_beehive_exists():
            markup.add(types.InlineKeyboardButton(
                '–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –ø–∞—Å—ñ–∫—É', callback_data='view_apiary'))
            markup.add(types.InlineKeyboardButton(
                '–°—Ç–≤–æ—Ä–∏—Ç–∏ –ø–∞—Å—ñ–∫—É', callback_data='create_apiary'))
        else:
            markup.add(types.InlineKeyboardButton(
                '–°—Ç–≤–æ—Ä–∏—Ç–∏ –ø–∞—Å—ñ–∫—É', callback_data='create_apiary'))

    bot.send_message(chat_id, "–õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ!", reply_markup=markup)


@bot.callback_query_handler(
    func=lambda call: call.data in ['login', 'registration', 'create_apiary', 'view_apiary', 'back_in_menu'])
def callback_handler(call):
    chat_id = call.message.chat.id
    message_id = call.message.message_id

    if call.data == 'login':
        bot.delete_message(chat_id, message_id)
        process_login(call.message)
    elif call.data == 'registration':
        bot.delete_message(chat_id, message_id)
        process_registration(call.message)
    elif call.data == 'create_apiary':
        # todo 5 –î–æ–±–∞–≤–∏—Ç–∏ –∑–∞–±–æ—Ä–æ–Ω—É –Ω–∞—Ç–∏—Å–∫–∞—Ç–∏ –∫–Ω–æ–ø–∫–∏ –∫–æ–ª–∏ –≤–∏–±—Ä–∞–Ω–æ –≤–∞—Ä—ñ–∞–Ω—Ç "–°—Ç–≤–æ—Ä–∏—Ç–∏ –ø–∞—Å—ñ–∫—É"
        bot.delete_message(chat_id, message_id)
        create_apiary(call.message)
    elif call.data == 'view_apiary':
        bot.delete_message(chat_id, message_id)
        view_apiary(call.message)
    elif call.data == 'back_in_menu':
        bot.delete_message(chat_id, message_id)
        send_welcome(call.message)


if __name__ == "__main__":
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ...")
    bot.delete_webhook()
    bot.polling(none_stop=True)

# import os
# import json
# from flask import Flask, request
# from telebot import TeleBot, types
#
# # –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
# TOKEN = "7967723128:AAGgP1d1FyuZYxdfPd45d1t081TfNDOECPQ"
# WEBHOOK_URL = "https://smart-beehive-telegram-bot.onrender.com"
# WEBHOOK_PATH = f"/webhook/{TOKEN}"
#
# # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞
# bot = TeleBot(TOKEN)
#
# app = Flask(__name__)
#
#
# @app.route('/webhook', methods=['POST'])
# def webhook():
#     print(f"üîë BOT_TOKEN: {TOKEN}, webhook {WEBHOOK_URL}")  # –õ–æ–≥ –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏
#
#     print("üî• –ó–∞–ø–∏—Ç –Ω–∞ /webhook –æ—Ç—Ä–∏–º–∞–Ω–æ")
#     try:
#         json_str = request.get_data().decode('UTF-8')
#         print(f"üì© –û—Ç—Ä–∏–º–∞–Ω–æ –∑–∞–ø–∏—Ç: {json_str}")
#
#         update = types.Update.de_json(json_str)
#         print(f"üîÑ –î–µ–∫–æ–¥–æ–≤–∞–Ω–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è: {update}")  # –õ–æ–≥ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
#
#         print("‚úÖ –û–±—Ä–æ–±–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è...")  # –õ–æ–≥ –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–¥–∞—á–µ—é –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –≤ –±–æ—Ç
#         bot.process_new_updates([update])
#         print(f"‚úÖ –û–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–µ—Ä–µ–¥–∞–Ω–æ –±–æ—Ç—É")
#
#         return 'OK', 200
#     except Exception as e:
#         print(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")
#         return 'Internal Server Error', 500
#
#
# @bot.message_handler(commands=['start'])
# def send_welcome(message):
#     chat_id = message.chat.id
#     print(f"üì¨ –ù–∞–¥—Å–∏–ª–∞—é –ø—Ä–∏–≤—ñ—Ç–∞–ª—å–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–æ —á–∞—Ç—É {chat_id}")  # –õ–æ–≥—É–≤–∞–Ω–Ω—è
#
#     try:
#         bot.send_chat_action(chat_id, "–ü—Ä–∏–≤—ñ—Ç! –¶–µ —Ç–µ—Å—Ç–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.")
#         print("‚úÖ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ")
#     except Exception as e:
#         print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {e}")
#
# if __name__ == "__main__":
#     print("‚úÖ –ó–∞–ø—É—Å–∫ Flask-—Å–µ—Ä–≤–µ—Ä–∞...")
#
#     # –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –≤–µ–±—Ö—É–∫–∞
#     bot.remove_webhook()
#     bot.set_webhook(url=f"{WEBHOOK_URL}")
#
#     port = int(os.environ.get("PORT", 10000))  # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∑–º—ñ–Ω–Ω—É —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞ PORT
#     app.run(host="0.0.0.0", port=port)

# @bot.message_handler(commands=['start'])
# def send_welcome(message):
#     print(f"üöÄ –û—Ç—Ä–∏–º–∞–Ω–æ –∫–æ–º–∞–Ω–¥—É /start –≤—ñ–¥ {message.chat.id}")
#     chat_id = message.chat.id
#     markup = types.InlineKeyboardMarkup()

#     bot.send_message(chat_id, "–õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ!")

#     if get_token(chat_id) is None:
#         markup.add(types.InlineKeyboardButton('–í—Ö—ñ–¥', callback_data='login'))
#         markup.add(types.InlineKeyboardButton('–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è', callback_data='registration'))
#     else:
#         if check_beehive_exists(chat_id):  # –ü–µ—Ä–µ–¥–∞—î–º–æ chat_id
#             markup.add(types.InlineKeyboardButton('–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –ø–∞—Å—ñ–∫—É', callback_data='view_apiary'))
#             markup.add(types.InlineKeyboardButton('–°—Ç–≤–æ—Ä–∏—Ç–∏ –ø–∞—Å—ñ–∫—É', callback_data='create_apiary'))
#         else:
#             markup.add(types.InlineKeyboardButton('–°—Ç–≤–æ—Ä–∏—Ç–∏ –ø–∞—Å—ñ–∫—É', callback_data='create_apiary'))

#     bot.send_message(chat_id, "–í–∏–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é:", reply_markup=markup)

# @bot.callback_query_handler(func=lambda call: call.data in ['login', 'registration', 'create_apiary', 'view_apiary', 'back_in_menu'])
# def callback_handler(call):
#     chat_id = call.message.chat.id
#     message_id = call.message.message_id
#
#     bot.delete_message(chat_id, message_id)
#
#     if call.data == 'login':
#         process_login(call.message)
#     elif call.data == 'registration':
#         process_registration(call.message)
#     elif call.data == 'create_apiary':
#         create_apiary(call.message)
#     elif call.data == 'view_apiary':
#         view_apiary(call.message)
#     elif call.data == 'back_in_menu':
#         send_welcome(call.message)



