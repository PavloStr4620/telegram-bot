import requests
import telebot
import re
from telebot import types
from telebot.types import ReplyKeyboardMarkup, KeyboardButton

from jwt_token import save_token
from bot_config import bot

SERVER_REG = "https://smart-beehive-server.onrender.com/api/users"


def process_registration(message):
    markup = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    button = KeyboardButton("üì± –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É", request_contact=True)
    markup.add(button)

    bot.send_message(
        message.chat.id,
        "–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å —Å–≤—ñ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É –∞–±–æ –≤–≤–µ–¥—ñ—Ç—å –π–æ–≥–æ –≤—Ä—É—á–Ω—É (9 —Ü–∏—Ñ—Ä –±–µ–∑ '+38').",
        reply_markup=markup
    )
    bot.register_next_step_handler(message, ask_registration_password)


def ask_registration_password(message):
    if message.contact:
        phone = message.contact.phone_number[-9:]
    else:
        phone = message.text.strip()
        if not re.fullmatch(r"\d{9}", phone):
            bot.send_message(message.chat.id, "–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç! –í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä —ñ–∑ 9 —Ü–∏—Ñ—Ä (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, 931234567):")
            return bot.register_next_step_handler(message, ask_registration_password)

    bot.send_message(message.chat.id, "–í–≤–µ–¥—ñ—Ç—å –ø–∞—Ä–æ–ª—å –¥–ª—è —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó (–º—ñ–Ω—ñ–º—É–º 8 —Å–∏–º–≤–æ–ª—ñ–≤):",
                     reply_markup=types.ReplyKeyboardRemove())
    bot.register_next_step_handler(message, register_user, phone)


def register_user(message, phone):
    chat_id = message.chat.id
    password = message.text.strip()

    if len(password) < 7:
        bot.send_message(chat_id, "–ü–∞—Ä–æ–ª—å –º–∞—î –±—É—Ç–∏ –º—ñ–Ω—ñ–º—É–º 8 —Å–∏–º–≤–æ–ª—ñ–≤. –í–≤–µ–¥—ñ—Ç—å —â–µ —Ä–∞–∑:")
        bot.register_next_step_handler(message, register_user, phone)
        return

    try:
        response = requests.post(SERVER_REG, json={"phonenumber": phone, "password": password}, timeout=10)

        from main import send_welcome
        if response.status_code == 201:
            save_token(chat_id, response.text)
            bot.send_message(chat_id, "‚úÖ –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è —É—Å–ø—ñ—à–Ω–∞! –û—Å—å –≤–∞—à–µ –º–µ–Ω—é:")
            send_welcome(message)
        elif response.status_code == 400:
            bot.send_message(chat_id, "‚ö†Ô∏è –¢–∞–∫–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —É–∂–µ —ñ—Å–Ω—É—î.")
            send_welcome(message)
        else:
            bot.send_message(chat_id, "‚ùå –ü–æ–º–∏–ª–∫–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó.")
            send_welcome(message)

    except requests.exceptions.Timeout:
        bot.send_message(chat_id, "‚è≥ –°–µ—Ä–≤–µ—Ä –Ω–µ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")
        bot.register_next_step_handler(message, process_registration)

    except requests.exceptions.RequestException as e:
        bot.send_message(chat_id, f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø–∏—Ç—É: {e}")
        bot.register_next_step_handler(message, process_registration)

# def process_registration(message):
#     bot.send_message(message.chat.id, "–í–≤–µ–¥—ñ—Ç—å –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É:")
#     bot.register_next_step_handler(message, ask_registration_password)
#
# def ask_registration_password(message):
#     chat_id = message.chat.id
#     phone = message.text
#     bot.send_message(chat_id, "–í–≤–µ–¥—ñ—Ç—å –ø–∞—Ä–æ–ª—å –¥–ª—è —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó:")
#     bot.register_next_step_handler(message, register_user, phone)
#
# def register_user(message, phone):
#     chat_id = message.chat.id
#     password = message.text
#
#     try:
#         response = requests.post(f"{SERVER_REG}", json={"phonenumber": phone, "password": password},
#                                  timeout=10)
#
#         from main import send_welcome
#         if response.status_code == 201:
#             save_token(message.chat.id, response.text)
#             bot.send_message(chat_id, "–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è —É—Å–ø—ñ—à–Ω–∞! –û—Å—å –≤–∞—à–µ –º–µ–Ω—é:")
#             send_welcome(message)
#         elif response.status_code == 400:
#             bot.send_message(chat_id, f"–¢–∞–∫–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —É–∂–µ —ñ—Å–Ω—É—î.")
#             send_welcome(message)
#         else:
#             bot.send_message(chat_id, f"–ü–æ–º–∏–ª–∫–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó.")
#             send_welcome(message)
#
#     except requests.exceptions.Timeout:
#         bot.send_message(chat_id, "–°–µ—Ä–≤–µ—Ä –Ω–µ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")
#         bot.register_next_step_handler(message, process_registration)
#         return
#
#     except requests.exceptions.RequestException as e:
#         bot.send_message(chat_id, f"–ü–æ–º–∏–ª–∫–∞ –∑–∞–ø–∏—Ç—É: {e}")
#         bot.register_next_step_handler(message, process_registration)



